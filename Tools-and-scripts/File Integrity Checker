#!/usr/bin/env python3
"""
FileIntegrityChecker.py
Author: Jessica Taylor
Date: 08/21/2025

Description:
A Python script to monitor and verify the integrity of files using SHA256 hashing.
Useful for detecting unauthorized changes to critical system or lab files.
"""

import hashlib
import os
import argparse

def hash_file(file_path):
    """
    Computes SHA256 hash of a file.
    """
    sha256 = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for block in iter(lambda: f.read(4096), b""):
                sha256.update(block)
        return sha256.hexdigest()
    except FileNotFoundError:
        return None

def check_integrity(directory):
    """
    Checks all files in a directory and prints their SHA256 hash.
    """
    print(f"[*] Checking integrity for files in {directory}")
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = hash_file(file_path)
            if file_hash:
                print(f"{file_path} -> {file_hash}")
            else:
                print(f"[ERROR] Cannot access {file_path}")

def main():
    parser = argparse.ArgumentParser(description="Simple File Integrity Checker")
    parser.add_argument("--directory", default=".", help="Directory to check (default: current directory)")
    args = parser.parse_args()

    check_integrity(args.directory)

if __name__ == "__main__":
    main()

